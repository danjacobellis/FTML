{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "267e4f8c-85dd-4f36-9ee4-0462952afe5d",
   "metadata": {
    "tags": [
     "remove-nb-cell"
    ]
   },
   "source": [
    "# Critique of \"50 Years of Test (Un)fairness\"\n",
    "\n",
    "[Slides](https://danjacobellis.github.io/FTML/critique_50y_fairness.slides.html)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0e072a5-d669-4465-9a53-03cf7f807acd",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    },
    "tags": [
     "remove-cell"
    ]
   },
   "source": [
    "<script>\n",
    "    document.querySelector('head').innerHTML += '<style>.slides { zoom: 1.75 !important; }</style>';\n",
    "</script>\n",
    "\n",
    "<center> <h1>\n",
    "Critique of \"50 Years of Test (Un)fairness\"\n",
    "<h2>Data Imbalance, Fairness, and Interpretability</h2>\n",
    "</h1> </center>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2be76973-05a3-4fa0-b237-0060c01ea21f",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    },
    "tags": []
   },
   "source": [
    "## Context of fairness definitions and measures\n",
    "\n",
    "* Train a model on some data\n",
    "* Examine the behavior of the trained model\n",
    "    * Functions of TP, FP, TN, FN (e.g. sufficiency or separation)\n",
    "    * Correlation $\\rho_{AR}$ between demographic feature $A$ and prediction $R$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93552fd0-65c9-42f5-9e8c-9e392bd24d8d",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    },
    "tags": []
   },
   "source": [
    "## Data vs Model Fairness\n",
    "\n",
    "* The same procedure may lead to a fair or unfair model depending on the data\n",
    "* The *balance* will determine which types of fairness are achieved during ERM"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0224c7f-4657-44d0-9279-30e06169ba0a",
   "metadata": {
    "tags": [
     "remove-nb-cell"
    ]
   },
   "source": [
    "![](img/data_balance.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2534ba65-531a-4f1c-8ac9-a292579aaed7",
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "source": [
    "<p style=\"text-align:center;\">\n",
    "<img src=\"_images/data_balance.png\" width=600 height=600 class=\"center\">\n",
    "</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a5ac9be-4f98-47dd-abad-37ef3e735b3c",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    },
    "tags": []
   },
   "source": [
    "## Interpretability vs Fairness\n",
    "\n",
    "* Example: CORALS algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5912bb4b-c4b2-4ed5-9994-69c9055352bd",
   "metadata": {
    "tags": [
     "remove-nb-cell"
    ]
   },
   "source": [
    "![](img/discrimination_1.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "687b6c9d-3d2b-4c05-b5b5-6a89f9bd571b",
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "source": [
    "<p style=\"text-align:center;\">\n",
    "<img src=\"_images/discrimination_1.png\" width=500 height=500 class=\"center\">\n",
    "</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5818c927-a34b-44e4-b087-378eba5351ae",
   "metadata": {},
   "source": [
    "* What makes this unfair?\n",
    "  * Changing sex from male to female results in a change in the prediction for anyone aged 18-20 with 0-1 prior offenses."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fba55afa-8f76-4372-8faa-18d7a911414e",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    },
    "tags": []
   },
   "source": [
    "## What is the takeaway supposed to be?\n",
    "\n",
    "* The author's advise us to look into the behavior of unfair models to debug them\n",
    "  * The answer will always be the same: unfairness minimizes risk on the data\n",
    "* They advise us to consider how intersectionality can be modeled\n",
    "  * Considering more intersections of subgroups will eventually lead back to individual analysis"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}